CMAKE_MINIMUM_REQUIRED(VERSION 3.16)
PROJECT(ZykovColor)
SET(CMAKE_CXX_STANDARD 17)
SET(SOURCE_FILES main.cpp
        Graph.cpp Graph.h
        ExtendSolvers.cpp ExtendSolvers.h
        Options.cpp Options.h
        Statistics.cpp Statistics.h
        CadicalZykovPropagator.cpp CadicalZykovPropagator.h
        GraphMatrix.cpp GraphMatrix.h
        IncSatGC.cpp IncSatGC.h
        mnts.cpp mnts.h
        FractionalBound.cpp FractionalBound.h
)

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -g")
SET(CMAKE_CXX_FLAGS_RELEASE_INIT "-O3 -g0" )
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO
        "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O3 -g -fno-omit-frame-pointer")

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
ENDIF()

#where to look for cmake modules, like FindPackage.cmake
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

FIND_PACKAGE(CADICAL REQUIRED)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} SYSTEM PRIVATE ${CADICAL_INCLUDE_DIR} ) #SYSTEM to supress compiler warning for external library
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ${CADICAL_LIBRARY})

FIND_PACKAGE(OPENWBO REQUIRED)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} SYSTEM PRIVATE ${OPENWBO_INCLUDE_DIRS} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ${OPENWBO_LIBRARY})

FIND_PACKAGE(ZLIB REQUIRED)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ZLIB::ZLIB)

FIND_PACKAGE(Boost REQUIRED COMPONENTS program_options)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE ${Boost_INCLUDE_DIR} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE Boost::program_options)

#search CliSAT binary
IF(NOT DEFINED CLISAT_BINARY_PATH)
    SET(CLISAT_BINARY_PATH ${PROJECT_SOURCE_DIR}/../CliSAT/bin/CliSAT)
ENDIF()
IF(EXISTS ${CLISAT_BINARY_PATH})
    MESSAGE("-- Found CliSAT binary at " ${CLISAT_BINARY_PATH})
    ADD_DEFINITIONS(-DCLISAT_BINARY_PATH="${CLISAT_BINARY_PATH}")
ELSE()
    MESSAGE( "Did not find CliSAT binary, not computing initial clique.")
ENDIF ()

FIND_PACKAGE(EXACTCOLORS REQUIRED)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}  PRIVATE ${EXACTCOLORS_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE ${EXACTCOLORS_LIBRARIES})
ADD_DEFINITIONS(-DEC_BINARY_PATH="${EXACTCOLORS_ROOT_DIR}/color")
MESSAGE("-- exactcolors binary at ${EXACTCOLORS_ROOT_DIR}/color")

FIND_PACKAGE(GUROBI REQUIRED)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}  PRIVATE ${GUROBI_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE Gurobi::gurobi)
SET(ENV{GUROBI_HOME} ${GUROBI_HOME})


IF (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    IF (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE stdc++fs)
    ENDIF ()
ENDIF ()

